#!/bin/bash

# this is a one-time use script for initial setup of the admin account.
# We're reading from the config file to get Bashuntu's root directory, so we know where we are in
#	the *actual* file system.
root_dir=$(awk 'NR == 1' ../../config/.root_dir)
current_dir=$(pwd)	# Used only for relative paths

set -o pipefail		# trace error through pipes
set -o errtrace		# trace error through "time command" and other functions

# Function for catching and printing errors through pipes
	# The syntax for calling this to correctly output errors is:
	# trap 'error ${LINENO} ${?}' ERR
error() {
	job="$0"
	last_line="$1"
	last_error="$2"
	date_time=$(date +"%Y-%m-%d %T")
	echo "ERROR in ${job} : line ${last_line} with exit code ${last_error}" >> "$root_dir/file_system/logs/errors/$date_time.log"
	exit 1
}

# Get args, like root_dir
while getopts ':r:' OPTION; do
	case $OPTION in
		r) root_dir="$OPTARG"
		   ;;
	esac
done

user_is_valid=0
password_is_valid=0
username_valid=""
password_valid=""
while (( $user_is_valid == 0 )); do
	echo "Usernames MUST be all lowercase"
	echo "Usernames may NOT contain spaces or special characters."
	echo "Please enter your new username:"
	read temp_user
	echo "You put $temp_user. Is this correct? y/n"
	read confirm
	if [ $confirm == "y" ] || [ $confirm == "Y" ]; then
		pattern=" |'"	# This is how we find spaces in the username
		if [[ $temp_user =~ [A-Z] ]]; then
			echo "You entered $temp_user. Usernames CANNOT contain uppercase letters. Try again."
		elif [[ $temp_user =~ $pattern ]]; then
			echo "Usernames CANNOT contain spaces! And don't think you can trick me by putting it in quotes! Try again."
		elif [[ $temp_user == *"admin"* ]]; then
			echo "Your username cannot be \"admin\", nor can it *contain* the word \"admin\". Try again."
		elif [[ $temp_user == *"root"* ]]; then
			echo "Don't make your username \"root\" or contain root in the name in any way. That's too easy to guess. Try again."
		elif [[ $temp_user == *"user"* ]]; then
			echo "I thought you were trying to keep people from guessing your username? Don't use \"user\" as a username. Try again."
		elif [[ $temp_user == *['!'@\#\$%^\&*()_+]* ]]; then
			echo "What part of NO SPECIAL CHARACTERS did you not understand? Try again."
		else
			(( user_is_valid=user_is_valid+1 ))
			username_valid=$temp_user
		fi
	else echo "Okay, try again."
	fi
done
echo "Great! Your username is now $valid_user."
echo "Now we need you to create a password for $valid_user."
echo "Passwords MUST contain at least TWO lower case letters!"
echo "Passwords MUST contain at least TWO upper case letters!"
echo "Passwords MUST contain at least TWO numbers!"
echo "Passwords MUST contain at least TWO special characters!"
while (( $password_is_valid == 0 )); do
	echo "Create a password for $username_valid..."
	read -s password
	echo "Enter again to confirm..."
	read -s password2
	spec_char=0
	upper_char=0
	lower_char=0
	num_char=0
	disallowed=0
	disallowed_char=""
	if [[ "$password" == "$password2" ]]; then
		pass_length=${#password}
		if (( $pass_length < 8 )); then
			echo "Password must be 8 characters or more!"
		fi
		for (( i=0; i<${#password}; i++ )); do
			num='^[0-9]+$'
			low_char='[a-z]+$'
			up_char='[A-Z]+$'
			spc_char='['!'@#\$%^\&*()_+]'
			if [[ ${password:$i:1} =~ $num ]]; then
				num_char=$((num_char + 1))
			elif [[ ${password:$i:1} =~ $low_char ]]; then
				lower_char=$((lower_char + 1))
			elif [[ ${password:$i:1} =~ $up_char ]]; then
				upper_char=$((upper_char + 1))
			elif [[ ${password:$i:1} =~ $spc_char ]]; then
				spec_char=$((spec_char + 1))
			else
				disallowed_char=${password:$i:1}
				disallowed=$((disallowed + 1))
			fi
		done
		if (( $disallowed == 0 )); then
			if (( $spec_char > 1 )); then
				if (( $upper_char > 1 )); then
					if (( $lower_char > 1 )); then
						if (( $num_char > 1 )); then
							password_is_valid=$((password_is_valid + 1))
							password_valid=$password
						else echo "mkusr: Passwords must contain at least 2 numbers!"
						fi
					else echo "mkusr: Passwords must contain at least 2 lowercase characters!"
					fi
				else echo "mkusr: Passwords must contain at least 2 uppercase characters!"
				fi
			else echo "mkusr: Passwords must contain at least 2 special characters!"
			fi
		else echo "mkusr: '$disallowed_char' is not allowed in your password. Try again."
		fi
	fi
done
echo "Username and Password are valid, proceeding to register new user..."
final_user_pass="$username_valid $password_valid power"
echo -n "Removing 'admin' from registered users..."
output_test_file=()
while read x; do
	if [[ "$x" == *"admin"* ]]; then
		output_test_file+=("$final_user_pass")
	else output_test_file+=("$x")
	fi
done < <(cat $root_dir/system_files/config/users)
echo "[ok]"
echo -n "Registering new user $username_valid..."
for x in "${!output_test_file[@]}";do
	echo "${output_test_file[$x]}" >> $root_dir/system_files/config/temp_users
done
rm $root_dir/system_files/config/users
mv $root_dir/system_files/config/temp_users $root_dir/system_files/config/users
echo "[ok]"
cat $root_dir/system_files/config/users
