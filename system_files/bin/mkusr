#!/bin/bash

new_username=""
new_password=""
new_group=""
user_is_unique=1
password_is_valid=0
group_is_valid=0

user_list=()
while read x; do
	user_list+=("$x")
done < <(cat $root_dir/system_files/config/users)

if [[ "$group" == "power" ]]; then
	if [[ -z "$1" ]]; then
		echo "Enter a username:"
		read new_username
	else new_username="$1"
	fi
	for x in "${!user_list[@]}"; do
		if [[ "$new_username" == *"${user_list[$x]}"* ]]; then
			candidate="${user_list[$x]}"
			for y in $candidate; do
				if [[ "$new_username" == "$y" ]]; then
					echo "mkusr: $new_username already exists!"
					user_is_unique=0
					break
				fi
			done
		fi
	done
	if ((user_is_unique == 1)); then
		echo "Do you want to create a password for this user, or"
		echo "do you want to use a default password and let the"
		echo "user change it upon their first login?"
		echo "[s] = set manually"
		echo "[d] = default"
		read password_choice
		if [[ "$password_choice" == "s" ]]; then
			while ((password_is_valid == 0)); do
				echo "Enter a password for $new_username:"
				read -s new_password1
				echo "Confirm new password"
				read -s new_password2
				if [[ "$new_password1" == "$new_password2" ]]; then
					spec_char=0
					upper_char=0
					lower_char=0
					num_char=0
					disallowed=0
					disallowed_char=""
					pass_length=${#new_password1}
					echo "$pass_length"
					if (( $pass_length > 7 )); then	# Dont' know why, but setting it to < 8 causes an off-by-one error
						for ((i=0; i<${#new_password1}; i++)); do
							num='^[0-9]+$'
							low_char='[a-z]+$'
							up_char='[A-Z]+$'
							spc_char='['!'@#\$%^\&*()_+]'
							if [[ ${new_password1:$i:1} =~ $num ]]; then
								echo "Found a number!"
								num_char=$((num_char + 1))
							elif [[ ${new_password1:$i:1} =~ $low_char ]]; then
								echo "Found a lower case letter!"
								lower_char=$((lower_char + 1))
							elif [[ ${new_password1:$i:1} =~ $up_char ]]; then
								echo "Found a upper case letter!"
								upper_char=$((upper_char + 1))
							elif [[ ${new_password1:$i:1} =~ $spc_char ]]; then
								echo "Found a special character!"
								spec_char=$((spec_char + 1))
							else
								echo "Found a disallowed character!"
								disallowed_char=${new_password1:$i:1}
								disallowed=$((disallowed + 1))
							fi
						done
					else echo "Password must be 8 characters or more!"
					fi
					if ((disallowed == 0)); then
						if ((spec_char > 1)); then
							if ((lower_char > 1)); then
								if ((upper_char > 1)); then
									if ((num_char > 1)); then
										password_is_valid=$((password_is_valid + 1))
										new_password="$new_password1"
									else echo "mkusr: Passwords must contain at least 2 numbers!"
									fi
								else echo "mkusr: Passwords must contain at least 2 upper case letters!"
								fi
							else echo "mkusr: Passwords must contain at least 2 lower case letters!"
							fi
						else echo "mkusr: Passwords must contain at least 2 special characters!"
						fi
					else echo "mkusr: '$disallowed_char' is not allowed in your password. Try again."
					fi
				fi
			done
		elif [[ "$password_choice" == "d" ]]; then
			new_password="password"
			password_is_valid=1
			echo "Default password has been set. User will be required"
			echo "to change their password upon first successful login."
			password_is_valid=1
		else
			echo "$password_choice was not an option."
			echo "mkusr: Exiting..."
		fi
		if ((password_is_valid == 1)); then
			echo "Set a user group for $new_username:"
			read temp_new_group
			if [[ "$temp_new_group" == "power" ]]; then
				new_group="power"
				group_is_valid=1
			elif [[ "$temp_new_group" == "general" ]]; then
				new_group="general"
				group_is_valid=1
			elif [[ "$temp_new_group" == "intern" ]]; then
				new_group="intern"
				group_is_valid=1
			else
				echo "$temp_new_group is not a valid user group!"
				echo "mkusr: Exiting..."
			fi
		fi
		if ((password_is_valid == 1)); then
			if ((group_is_valid == 1)); then
				echo "$new_username $new_password $new_group" >> $root_dir/system_files/config/users
				echo "mkusr: New user $new_username has been created and registered!"
				echo "mkusr: Exiting..."
			fi
		fi
	fi
else echo "mkusr: Permission denied!"
fi
